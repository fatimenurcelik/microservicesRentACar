package com.kodlamaio.paymentService.business.concretes;

import java.util.UUID;

import org.springframework.stereotype.Service;

import com.kodlamaio.common.rentalPayment.PayMoneyRequest;
import com.kodlamaio.common.utilities.exceptions.BusinessException;
import com.kodlamaio.common.utilities.mapping.ModelMapperService;
import com.kodlamaio.paymentService.business.abstracts.PaymentService;
import com.kodlamaio.paymentService.business.responses.CreatePaymentResponse;
import com.kodlamaio.paymentService.dataAccess.PaymentRepository;
import com.kodlamaio.paymentService.entities.Payment;
import com.kodlamaio.paymentService.kafka.PaymentProducer;
import com.kodlamaio.paymentService.webApi.controllers.RentalApi;

import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class PaymentManager implements PaymentService {
	private PaymentRepository paymentRepository;
	private ModelMapperService modelmapperService;
	private PaymentProducer paymentProducer;
	//private RentalApi rentalApi;
	//private PaymentClient paymentClient;

	@Override
	public CreatePaymentResponse add(PayMoneyRequest createPaymentRequest) {
		checkBalanceEnough(createPaymentRequest.getBalance(), createPaymentRequest.getTotalPrice());
		Payment payment = this.modelmapperService.forRequest().map(createPaymentRequest, Payment.class);
		payment.setId(UUID.randomUUID().toString());
		payment.setBalance(createPaymentRequest.getBalance());
		payment.setTotalPrice(createPaymentRequest.getTotalPrice());
		
		paymentRepository.save(payment);
		
//		senkron olması gerektiği için
//		
//		PaymentCreatedEvent paymentCreatedEvent = new PaymentCreatedEvent();
//		paymentCreatedEvent.setRentalId(createPaymentRequest.getRentalId());
//		paymentCreatedEvent.setMessage("Payment carried out");
//		
		CreatePaymentResponse createPaymentResponse = this.modelmapperService.forResponse().map(payment,
				CreatePaymentResponse.class);
		return createPaymentResponse;
	}

	private void checkBalanceEnough(double balance, double totalPrice) {
		if (balance < totalPrice) {
			throw new BusinessException("Balance is not enough :(");
		}
	}

}
